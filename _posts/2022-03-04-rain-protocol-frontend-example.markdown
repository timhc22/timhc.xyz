---
layout: single
title:  "Rain Protocol: Frontend Example"
date:   2022-02-21 14:00:23 +0000
categories: development
---

## Intro

For this tutorial, we will go through setting up a frontend example app which interacts with Rain GatedNFT contracts.

After this tutorial, you will be able to see how a frontend app can interact with Rain tooling.

## Setting up the Environment

We won't go into too much detail on setting up (and differences between) `npm` and `npx` or on how to code in React or using git, you can look this up yourself, but we will begin with automatically generating a basic template React app using `create-react-app`. Run `npx create-react-app --template typescript rain-frontend-example`. 

You will now have an example app which you can edit in the way you prefer. If you now run `npm start`, you should now be able to see the template app in your browser at http://localhost:3000/

Next we will install the [Ethers][ethers] library for interacting with an EVM compatible blockchain: `npm install ethers` and also Hardhat for setting up a test local blockchain: `npm install --save-dev @nomiclabs/hardhat-ethers @nomiclabs/hardhat-waffle hardhat`. To learn more about how to set up a Hardhat project, check out our [previous tutorial here][previous-tutorial].

### Creating the HardHat environment

As we are not creating a hardhat project automatically, we will want to add a couple more files to get the environment working correctly. In the root directory, add a file called `hardhat.config.js` and add the following contents (or copy the file from the autogeneration in the [previous tutorial][previous-tutorial]):

```
require("@nomiclabs/hardhat-waffle");

// This is a sample Hardhat task. To learn how to create your own go to
// https://hardhat.org/guides/create-task.html
task("accounts", "Prints the list of accounts", async (taskArgs, hre) => {
  const accounts = await hre.ethers.getSigners();

  for (const account of accounts) {
    console.log(account.address);
  }
});

// You need to export an object to set up your config
// Go to https://hardhat.org/config/ to learn more

/**
 * @type import('hardhat/config').HardhatUserConfig
 */
module.exports = {
  solidity: "0.8.12",
};
```

We also want to add the following scripts to our `package.json` file:

```
  "scripts": {
    "compile": "npx hardhat compile",
    "run-blockchain": "npx hardhat node"
  },
```

We should also add the following autogenerated files to `.gitignore` if we are using version control (which we should be, see [previous tutorial][previoos-tutorial])

```
#Hardhat files
cache
artifacts
```

We can now run a local version of a blockchain (http://127.0.0.1:8545/) by running `npm run run-blockchain`. We will use this when developing this example and you will need to re-run it (along with `npm run start` each time you set up the app).

## Connecting to the blockchain

You will now want to use a Web3 wallet to connect to your local blockchain instance. Setting up the connection is beyond the scope of this article, but you can find instructions for this under [MetaMask Installation & Configuration][web3-connect]. The private key you import and the public address you use should not change between restarts of hardhat, but make sure you don't send funds to these addresses on or from a wallet on a different chain, otherwise funds will be lost. 


[//]: # (todo does hardhat work with regular ethers?)
[//]: # (todo what is the best way to get the abi in or are we using typechain)
[//]: # (todo does josh use own connect button or a library?)

[discord]: https://discord.gg/dzYS3JSwDP
[ethers]: https://docs.ethers.io/
[hardhat]: https://hardhat.org/getting-started/

[//]: # (todo link here)
[previous-tutorial]: https://blog.rainprotocol.xyz
[web3-connect]: https://www.web3.university/article/how-to-build-a-react-dapp-with-hardhat-and-metamask
